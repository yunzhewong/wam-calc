{"version":3,"sources":["index.js"],"names":["Table","props","subjArray","this","class","map","value","key","year","sem","code","title","mark","credit","React","Component","Average","total","totalCredit","i","length","parseFloat","txt","n","desc","Math","round","WamReaderStats","split","splitted","WamReader","state","refreshCount","handleChange","bind","event","setState","target","onSubmit","handleSubmit","onChange","rows","cols","ReactDOM","render","document","getElementById"],"mappings":"4NAIMA,E,kDACJ,WAAYC,GAAO,uCACXA,G,0CAGR,WACE,IAAMC,EAAYC,KAAKF,MAAMC,UAC7B,OACE,gCACE,+CACA,wBAAOE,MAAQ,SAAf,UACE,gCACE,+BACE,uCAAQ,QACR,2CAAQ,OACR,+CAAQ,QACR,gDAAQ,SACR,6CAAQ,QACR,gDAAQ,eAGZ,gCACGF,EAAUG,KAAI,SAACC,EAAOC,GACrB,OACE,+BACE,6BAAiBD,EAAME,MAAd,EAAED,GACX,6BAAmBD,EAAMG,KAAhB,EAAEF,EAAI,GACf,6BAAmBD,EAAMI,MAAhB,EAAEH,EAAI,GACf,6BAAmBD,EAAMK,OAAhB,EAAEJ,EAAI,GACf,6BAAmBD,EAAMM,MAAhB,EAAEL,EAAI,GACf,6BAAmBD,EAAMO,QAAhB,EAAEN,EAAI,qB,GA9BbO,IAAMC,WAyCpBC,E,kDACJ,WAAYf,GAAO,uCACXA,G,0CAGR,WAIE,IAHA,IAAMC,EAAYC,KAAKF,MAAMC,UACzBe,EAAQ,EACRC,EAAc,EACTC,EAAI,EAAGA,EAAIjB,EAAUkB,OAAQD,IAAI,CACxC,IAAMN,EAASQ,WAAWnB,EAAUiB,GAAGN,QACvCI,GAASI,WAAWnB,EAAUiB,GAAGP,MAAQC,EACzCK,GAAeL,EAIjB,IAAIS,EAAM,GACNC,EAAI,IACJC,EAAO,GAqBX,OAzBAP,GAAUC,IAKG,IACXI,EAAM,KACNE,EAAO,uBACEP,GAAS,IAClBK,EAAM,MACNE,EAAO,mCACEP,GAAS,IAClBK,EAAM,MACNE,EAAO,mCACEP,GAAS,IAClBK,EAAM,KACNE,EAAO,uBACEP,GAAS,IAClBM,EAAI,GACJD,EAAM,IACNE,EAAO,SAEPF,EAAM,IACNE,EAAO,QAGP,gCACE,gEAAmCC,KAAKC,MAAM,IAAIT,GAAO,OACzD,kDAAqBM,EAArB,IAAyBD,EAAzB,KAAgCE,Y,GA1ClBV,IAAMC,WAgDtBY,E,kDACJ,WAAY1B,GAAO,uCACXA,G,0CAGR,WACE,IAEMC,EAFQC,KAAKF,MAAMK,MACAsB,MAAM,MACFvB,KAAI,SAAAC,GAC/B,IAAMuB,EAAWvB,EAAMsB,MAAM,MAS7B,MARgB,CACdpB,KAAMqB,EAAS,GACfpB,IAAKoB,EAAS,GACdnB,KAAMmB,EAAS,GACflB,MAAOkB,EAAS,GAChBjB,KAAMiB,EAAS,GACfhB,OAAQgB,EAAS,OAIA3B,EAAUkB,OAE/B,OACE,sBAAKhB,MAAQ,SAAb,UACE,cAACJ,EAAD,CAAOE,UAAWA,IAClB,cAACc,EAAD,CAASd,UAAWA,W,GAzBCY,IAAMC,WAgC7Be,E,kDACJ,WAAY7B,GAAO,IAAD,8BAChB,cAAMA,IACD8B,MAAQ,CAACzB,MAAO,GAAI0B,aAAc,GAEvC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAJJ,E,gDAOlB,SAAcC,GACZhC,KAAKiC,SAAU,CAAC9B,MAAO6B,EAAME,OAAO/B,U,oBAGtC,WACE,IAAMA,EAAQH,KAAK4B,MAAMzB,MAEzB,OACE,sBAAKF,MAAQ,SAAb,UACE,uBAAMkC,SAAYnC,KAAKoC,aAAvB,UACE,2FAGA,uBACA,0BACEjC,MAASH,KAAK4B,MAAMzB,MACpBkC,SAAUrC,KAAK8B,aACfQ,KAAO,KACPC,KAAO,WAVb,mBAcI,gCACE,cAACf,EAAD,CAAgBrB,MAAOA,IADzB,OAdJ,SAkBI,qBAAKF,MAAM,SAAX,SACE,2E,GAnCYU,IAAMC,WA4C9B4B,IAASC,OACP,cAACd,EAAD,IACAe,SAASC,eAAe,W","file":"static/js/main.1ff899be.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Table extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    const subjArray = this.props.subjArray;\n    return(\n      <div>\n        <h3>You entered: </h3>\n        <table class = \"center\">\n          <thead>\n            <tr>\n              <th key=\"year\"> Year </th>\n              <th key=\"sem\"> Semester </th>\n              <th key=\"code\"> Subject Code </th>\n              <th key=\"title\"> Subject Title </th>\n              <th key=\"mark\"> Final Mark </th>\n              <th key=\"credit\"> Credit Points </th>\n            </tr>\n          </thead>\n          <tbody>\n            {subjArray.map((value, key) => {\n              return (\n                <tr>\n                  <td key={6*key}>{value.year}</td>\n                  <td key={6*key+1}>{value.sem}</td>\n                  <td key={6*key+2}>{value.code}</td>\n                  <td key={6*key+3}>{value.title}</td>\n                  <td key={6*key+4}>{value.mark}</td>\n                  <td key={6*key+5}>{value.credit}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nclass Average extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    const subjArray = this.props.subjArray;\n    var total = 0;\n    var totalCredit = 0;\n    for (let i = 0; i < subjArray.length; i++){\n      const credit = parseFloat(subjArray[i].credit);\n      total += parseFloat(subjArray[i].mark) * credit;\n      totalCredit += credit;\n    }\n    total /= (totalCredit);\n\n    var txt = \"\";\n    var n = \"n\";\n    var desc = \"\";\n    if (total >= 80){\n      txt = \"H1\";\n      desc = \"First Class Honours\";\n    } else if (total >= 75){\n      txt = \"H2A\";\n      desc = \"Second Class Honours Division A\";\n    } else if (total >= 70){\n      txt = \"H2B\";\n      desc = \"Second Class Honours Division B\";\n    } else if (total >= 65){\n      txt = \"H3\";\n      desc = \"Third Class Honours\";\n    } else if (total >= 50){\n      n = \"\";\n      txt = \"P\";\n      desc = \"Pass\";\n    } else {\n      txt = \"N\";\n      desc = \"Fail\";\n    }\n    return (\n      <div>\n        <h1>Your Weighted Average Mark is {Math.round(100*total)/100}</h1>\n        <h2>This counts as a{n} {txt}: {desc}</h2>\n      </div>\n    );\n  }\n}\n\nclass WamReaderStats extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    const value = this.props.value;\n    const byRowArray = value.split(\"\\n\");\n    const subjArray = byRowArray.map(value => {\n      const splitted = value.split(\"\\t\");\n      const subject = {\n        year: splitted[0],\n        sem: splitted[1],\n        code: splitted[2],\n        title: splitted[3],\n        mark: splitted[5],\n        credit: splitted[8]\n      };\n      return subject;\n    });\n    const subjectCount = subjArray.length;\n\n    return(\n      <div class = \"center\">\n        <Table subjArray={subjArray}/>\n        <Average subjArray={subjArray}/>\n      </div>\n    );\n  }\n}\n\n\nclass WamReader extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {value: '', refreshCount: 0};\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange (event){\n    this.setState ({value: event.target.value});\n  }\n\n  render(){\n    const value = this.state.value;\n\n    return(\n      <div class = \"center\">\n        <form onSubmit = {this.handleSubmit}>\n          <label>\n          Copy-Paste your results page table into this text-box.\n          </label>\n          <br/>\n          <textarea\n            value = {this.state.value}\n            onChange={this.handleChange}\n            rows = \"24\"\n            cols = \"150\"\n            />\n        </form>\n        if (value != \"\"){\n          <div>\n            <WamReaderStats value={value}/>}\n          </div>\n        } else {\n          <div class=\"center\">\n            <h3> Your results will appear here: </h3>\n          </div>\n\n        }\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <WamReader />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}